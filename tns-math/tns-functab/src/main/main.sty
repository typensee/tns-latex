% == PACKAGES == %

\RequirePackage{nicematrix}%
               [6.26]


% == TOOLS == %

\ExplSyntaxOn

% -- FUNCTABLE ENV. - MAIN API -- %

% :: \L3 INTERFACE :: %

%%%
% prototype::
%     #1 : the user's settings (see below).
%     #2 : the DSL code of the table.
%
%     :action: an internal version of the information given via the DSL
%              is created, and then, unless otherwise stated, the table
%              corresponding to the data is produced.
%
%     :see: l3func.tns_functab_functable:nn
%
%
% =================
% Available options
% =================
%
% XXXX
%%%
\NewDocumentEnvironment{ functable }{ O{} b }{%
  \tns_functab_functable:nn { #1 } { #2 }
}{}


% :: MESSAGES :: %

\msg_set:nnnn { tnsfunctab } { context-unknown  }
  { illegal ~ context ~ << ~ #2 ~ >> ~ : ~ see ~ the ~ context ~ nb.#1. }
  { \msg_see_documentation_text:n { tnsfunctab } }


\msg_set:nnnn { tnsfunctab } { context-misplaced }
  { the ~ context ~ << ~ #1 ~ >> ~ must ~ be ~ at ~ the ~ #2 ~ place. }
  { \msg_see_documentation_text:n { tnsfunctab } }


\msg_set:nnnn { tnsfunctab } { context-bad-use }
  { bad ~ use ~ of ~ the ~ context ~ << ~ #2 ~ >> ~ : ~ see ~ the ~ context ~ nb.#1. }
  { \msg_see_documentation_text:n { tnsfunctab } }


% :: \L3 MAIN IMPLEMENTATION :: %

% The IDs of the env.
\int_new:N        \g_tns_functab_id_int
\int_set:Nn       \g_tns_functab_id_int { 0 }
% \prop_clear_new:N \g_tns_functab_id_user_prop

% Semantic of the env.
\seq_new:N \g_tns_functab_kind_seq
\int_new:N \l_tns_functab_context_actual_nb_int

% Shortname of contexts.
\prop_clear_new:N  \g_tns_functab_shortname_ctxts_prop

\prop_set_from_keyval:Nn \g_tns_functab_shortname_ctxts_prop {
  i = imgs,
  m = mat,
  s = signs,
  v = vars,
  x = xvals,
  y = yvals
}


%%%
% prototype::
%     :action: the work expected by the `functable` \env.
%
%     :see: env.functable ,
%           l3func.tns_core_DSL_ctxt_parser:nn
%%%
\cs_new:Npn \tns_functab_functable:nn #1#2 {
% TODO
% Options to use.


% Internal ID number.
  \int_gincr:N \g_tns_functab_id_int

% Parsing the agnostic "context" DSL code.
  \tns_core_DSL_ctxt_parser:nnN
    { -:- functable.pre.parsing.contexts -:- } % Temporary ID
    { #2 }
    { \g_tns_functab_shortname_ctxts_prop }

% -------------
% DEBUG - START

%   \seq_show:c { -:- functable.pre.parsing.contexts -:- :: contexts }
%   \seq_show:c { -:- functable.pre.parsing.contexts -:- :: labels }
%   \seq_show:c { -:- functable.pre.parsing.contexts -:- :: contents }

% DEBUG - END
% -----------

% Do we have a legal DSL code?
% If it does, we build an internal easy-to-use version of the user's data.
  \tns_functab_validate_ctxts_seq:n
  \tns_functab_build_internal:n

% Let's do what the user wants.
  \par
  {\hfill \Huge TODO}
}


% :: VALIDATION OF A FUNC. TABLE :: %

% The IDs of the env.
\bool_new:N \l_tns_functab_xvals_used_bool
\bool_new:N \l_tns_functab_yvals_used_bool
\bool_new:N \l_tns_functab_imgs_used_bool
\bool_new:N \l_tns_functab_mat_used_bool
\bool_new:N \l_tns_functab_signs_vars_used_bool


%%%
% prototype::
%     :action: ??? porducton of internal version (taht could be used later iwithout reparsing)
%%%
\cs_new:Npn \tns_functab_validate_ctxts_seq:n {
% Good use of the contexts?
%
% NOTE. We have the long name of contexts.
  \int_zero:N \l_tns_functab_context_actual_nb_int

  \bool_set_false:N \l_tns_functab_xvals_used_bool
  \bool_set_false:N \l_tns_functab_yvals_used_bool
  \bool_set_false:N \l_tns_functab_imgs_used_bool
  \bool_set_false:N \l_tns_functab_mat_used_bool
  \bool_set_false:N \l_tns_functab_signs_vars_used_bool

  \seq_map_inline:cn { -:- functable.pre.parsing.contexts -:- :: contexts } {
    \int_incr:N \l_tns_functab_context_actual_nb_int

    \par

    \str_case_e:nnF { ##1 } {
% XVALS.
%
% 1st context.
      { xvals } {
        \int_compare:nNnF \l_tns_functab_context_actual_nb_int = 1 {
          \msg_error:nnnn { tnsfunctab } { context-misplaced }
                          { xvals }
                          { 1st }
        }

        \bool_set_true:N \l_tns_functab_xvals_used_bool
      }
% YVALS.
%
% 2nd context if it is used.
      { yvals } {
        \int_compare:nNnF \l_tns_functab_context_actual_nb_int = 2 {
          \msg_error:nnnn { tnsfunctab } { context-misplaced }
                          { yvals }
                          { 2nd }
        }

        \bool_set_true:N \l_tns_functab_yvals_used_bool
      }
% IMGS: 1D-DATA.
      { imgs } {
        \bool_if:nT {
               ! \l_tns_functab_xvals_used_bool
            || \l_tns_functab_yvals_used_bool
            || \l_tns_functab_mat_used_bool
            || \l_tns_functab_signs_vars_used_bool
        } {
          \msg_error:nnVn { tnsfunctab } { context-bad-use }
                          \l_tns_functab_context_actual_nb_int
                          { ##1 }
        }

        \bool_set_true:N \l_tns_functab_imgs_used_bool
      }
% MAT: 2D-DATA.
      { mat } {
        \bool_if:nT {
               ! \l_tns_functab_xvals_used_bool
            || ! \l_tns_functab_yvals_used_bool
            || \l_tns_functab_imgs_used_bool
            || \l_tns_functab_signs_vars_used_bool
        } {
          \msg_error:nnVn { tnsfunctab } { context-bad-use }
                          \l_tns_functab_context_actual_nb_int
                          { ##1 }
        }

        \bool_set_true:N \l_tns_functab_mat_used_bool
      }
% SIGNS (with or without vars).
      { signs } {
        \bool_if:nT {
               ! \l_tns_functab_xvals_used_bool
            || \l_tns_functab_yvals_used_bool
            || \l_tns_functab_imgs_used_bool
            || \l_tns_functab_mat_used_bool
        } {
          \msg_error:nnVn { tnsfunctab } { context-bad-use }
                          \l_tns_functab_context_actual_nb_int
                          { ##1 }
        }

        \bool_set_true:N \l_tns_functab_signs_vars_used_bool
      }
% VARS (with or without signs).
      { vars } {
        \bool_if:nT {
               ! \l_tns_functab_xvals_used_bool
            || \l_tns_functab_yvals_used_bool
            || \l_tns_functab_imgs_used_bool
            || \l_tns_functab_mat_used_bool
        } {
          \msg_error:nnVn { tnsfunctab } { context-bad-use }
                          \l_tns_functab_context_actual_nb_int
                          { ##1 }
        }

        \bool_set_true:N \l_tns_functab_signs_vars_used_bool
      }
% UNKNOWN CONTEXT
%
% Let's be silent with the missing context error that have been already
% indicated by the context DSL parser.
      { :-: ctxt-dsl-missing-context :-: } { }
    }{
      \msg_error:nnVn { tnsfunctab } { context-unknown  }
                      { \int_use:N \l_tns_functab_context_actual_nb_int }
                      { ##1 }
    }
  }
}


%%%
% prototype::
%     :action: ??? porducton of internal version (taht could be used later iwithout reparsing)
%%%
\cs_new:Npn \tns_functab_build_internal:n {
    OK????
% -------------
% DEBUG - START

  \seq_show:c { -:- functable.pre.parsing.contexts -:- :: contexts }
  \seq_show:c { -:- functable.pre.parsing.contexts -:- :: labels }
  \seq_show:c { -:- functable.pre.parsing.contexts -:- :: contents }

% DEBUG - END
% -----------
}


% :: \L3 SIGNS :: %


% :: \L3 VARIATIONS :: %


\ExplSyntaxOff
