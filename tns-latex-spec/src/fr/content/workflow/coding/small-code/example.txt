this::
    date = 2022-06-19


==========================
Un exemple comme fil rouge
==========================

L'automatisation se fait en respectant un style de codage et une organisation des dossiers et des fichiers.
Pour la suite, nous allons travailler avec l'exemple suivant d'un package fictif nommé ``tnsfictif``.

path-tree::
    + tnsfictif
        * about.peuf
        + src
            * about.peuf
            + intro
                * intro.tex
            + alpha-et-omega3
                * alpha.tex
                * alpha.sty
                * omega3.tex
                * omega3.sty
            + poor-lonesome-cowboy
                * about.peuf
                * lucky-1.tex
                * lucky-2.tex
                * lucky.sty
                * rantanplan.tex
                * rantanplan.sty
        + [...]


Voici des choses importantes à connaître et respecter.

    1) Le développement "morceau par morceau" se fait dans le sous-dossier path::``src``.

    1) Chaque fichier path::``STY`` codant un morceau du package doit se trouver dans un sous-dossier de profondeur `1` de path::``src``.
    Bien noter que l'on travaille directement dans un sous-dossier sans passer via des sous-sous-dossiers contenant le fichier path::``STY``.

    1) Il est possible de rédiger des fichiers path::``TEX`` pour documenter des fonctionnalités.
    Dans ce cas, il faut aussi respecter une profondeur de `1` comme pour les fichiers path::``STY``.
    Dans notre exemple fictif, path::``intro/intro.tex`` est considéré comme étant une ¨doc écrite dans la langue indiquée dans le fichier path:``src/about.peuf``, voir cf::``?../metainfos/allpack.txt`` à ce propos.

    1) Des fichiers ressources peuvent être utilisés : voir cf::``:?../resource.txt`` pour en savoir plus.

    1) Deux types de lecture ordonnée des dossiers et fichiers sont possibles
    ((
        Ceci est important pour la ¨doc finale à destination des utilisateurs, ou bien pour organiser du code si cela est indispensable.
    )).

        * Un dossier sans fichier path::``about.peuf`` sera analysé en utilisant l'ordre lexicographique usuel.
        Dans notre exemple fictif, le dossier path::``alpha-et-omega3`` sera analysé en prenant path::``alpha.sty`` puis path::``omega3.sty`` ainsi que path::``alpha.tex`` suivi de path::``omega3.tex``.

        * Dans un dossier source, un fichier path::``about.peuf`` permet d'imposer un ordre à suivre. Nous allons revenir sur ceci dans les deux sections suivantes.


warning::
    Le dossier path::``tnsfictif`` ne peut pas contenir un sous-dossier path::``tnsfictif`` où seront codées des fonctionnalités.
    Cela vient tout simplement du fait que le projet finale sera créé automatiqument dans le sous-dossier path::``tnsfictif/tnsfictif``.
