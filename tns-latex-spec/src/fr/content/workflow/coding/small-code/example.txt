this::
    date = 2023-09-30


==========================
Un exemple comme fil rouge
==========================

L'automatisation se fait en respectant un style de codage et une organisation des dossiers et des fichiers.
Pour la suite, nous allons travailler avec l'exemple suivant d'un \pack fictif nommé ``tnsfictive``.

dirtree::
    + tnsfictive
        * about.yaml
        + src
            * about.yaml
            + intro
                * intro.tex
            + alpha-et-omega3
                * alpha.tex
                * alpha.sty
                * omega3.tex
                * omega3.sty
            + poor-lonesome-cowboy
                * about.yaml
                * lucky-1.tex
                * lucky-2.tex
                * lucky.sty
                * rantanplan.tex
                * rantanplan.sty
        + [...]


Voici des choses importantes à connaître et à respecter.

    1) Le \dev "morceau par morceau" se fait dans le sous-dossier path::``src``.

    1) Le fichier path::``intro/intro.tex`` explique rapidement le cadre d'utilisation du \pack.

    1) Chaque fichier ext::``sty`` codant un morceau du \pack doit se trouver dans un sous-dossier de profondeur `1` de path::``src``.
    Bien noter que l'on travaille directement dans un sous-dossier sans passer via des "sous-sous-dossiers" contenant le fichier ext::``sty``.

    1) Il est possible de rédiger des fichiers ext::``tex`` pour documenter des fonctionnalités.
    Dans ce cas, il faut aussi respecter une profondeur de `1` comme pour les fichiers ext::``sty``.
    Dans notre exemple fictif, path::``intro/intro.tex`` est considéré comme étant une \doc écrite dans la langue indiquée dans le fichier path:``src/about.yaml``, voir cf::``?/metainfos/allpacks.txt`` à ce propos.

    1) Des fichiers ressources peuvent être utilisés : voir cf::``?/resource.txt`` pour en savoir plus.

    1) Deux types de lecture ordonnée des dossiers et fichiers sont possibles
    ((
        Ceci est important pour la \doc finale à destination des utilisateurs, ou bien pour organiser du code si cela est nécessaire.
    )).

        * Un dossier sans fichier path::``about.yaml`` sera analysé en utilisant l'ordre \lexico usuel.
        Dans notre exemple fictif, le dossier path::``alpha-et-omega3`` sera analysé en prenant path::``alpha.sty``, puis path::``omega3.sty`` pour la code du \pack, ainsi que path::``alpha.tex`` suivi de path::``omega3.tex`` pour la \doc "utilisateur".

        * Dans un dossier \src, un fichier path::``about.yaml`` permet d'imposer un ordre à suivre. Nous allons revenir sur ceci dans les deux sections suivantes.


warning::
    Le dossier path::``tnsfictive`` ne peut pas contenir un sous-dossier path::``tnsfictive`` où seront codées des fonctionnalités.
    Cela vient tout simplement du fait que le projet final sera créé \auto^t dans le sous-dossier path::``tnsfictive/tnsfictive`` en écrasant au préalable un éventuel sous-dossier path::``tnsfictive/tnsfictive`` existant.
